{{- $releaseName := .Release.Name -}}
{{- $chartName := include "cache-seeder.name" . -}}
{{- $cloudProviderFlavor := include "cache-seeder.cloudProviderFlavor" . -}}
{{- $cloudProviderDockerRegistryUrl := include "cache-seeder.cloudProviderDockerRegistryUrl" . -}}
{{- $cloudProviderImagePullSecretName := include "cache-seeder.cloudProviderImagePullSecretName" . -}}
{{- $imageTag := include "cache-seeder.tag" . -}}
{{- $storage := (include "common.storage.merged" .) | fromYaml }}
{{- $s3 := (include "common.s3.merged" .) | fromYaml }}
{{- $fs := (include "common.fs.merged" .) | fromYaml }}

{{- if .Values.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ printf "%s-deployment" (include "cache-seeder.fullname" .) }}
  labels:
    app: {{ $chartName }}
    component: {{ $chartName }}
    environment: {{ include "cache-seeder.environment" . }}
    release: {{ $releaseName }}
    {{- include "cache-seeder.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      app: {{ $chartName }}
      release: {{ $releaseName }}
      run: {{ $releaseName }}-{{ $chartName }}
      {{- include "cache-seeder.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: {{ $chartName }}
        release: {{ $releaseName }}
        run: {{ $releaseName }}-{{ $chartName }}
        {{- include "cache-seeder.selectorLabels" . | nindent 8 }}
      annotations:
      {{- if .Values.resetOnConfigChange }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- end }}
      {{- if .Values.podAnnotations }}
      {{- toYaml .Values.podAnnotations | nindent 8 }}
      {{- end }}
    spec:
    {{- if $cloudProviderImagePullSecretName }}
      imagePullSecrets:
        - name: {{ $cloudProviderImagePullSecretName | quote }}
    {{- end }}
      containers:
        - name: {{ $releaseName }}-{{ $chartName }}-deployment
          {{- with .Values.image }}
          image: {{ $cloudProviderDockerRegistryUrl }}{{ .repository }}:{{ $imageTag }}
          imagePullPolicy: {{ .pullPolicy | default "IfNotPresent" }}
          {{- end }}
          {{- if .Values.command }}
          command: 
          {{- toYaml .Values.command | nindent 12 }}
          {{- if .Values.args }}
          args: 
          {{- toYaml .Values.args | nindent 12 }}
          {{- end }}
          {{- end }}
          volumeMounts:
            {{- if .Values.caSecretName }}
            - name: root-ca
              mountPath: {{ printf "%s/%s" .Values.caPath .Values.caKey | quote }}
              subPath: {{ quote .Values.caKey }}
            {{- end }}
            {{- if .Values.extraVolumeMounts -}}
              {{ toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
            {{- if eq (upper $storage.tilesStorageProvider) "FS" }}
            - name: output-storage
              mountPath: {{ $fs.internalPvc.mountPath }}
              subPath: {{ $fs.internalPvc.tilesSubPath }}
            {{- end }}
          env:
            - name: SERVER_PORT
              value: {{ .Values.env.targetPort | quote }}
            {{- if .Values.caSecretName }}
            - name: REQUESTS_CA_BUNDLE
              value: {{ printf "%s/%s" .Values.caPath .Values.caKey | quote }}
            - name: NODE_EXTRA_CA_CERTS
              value: {{ printf "[%s/%s]" .Values.caPath .Values.caKey | quote }}
            {{- end }}
            {{- if eq (upper $storage.tilesStorageProvider) "S3" }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ $s3.secretName }}
                  key: accessKeyId
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $s3.secretName }}
                  key: secretAccessKey
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- toYaml .Values.extraEnvVars | nindent 12 }}
            {{- end }}            
          envFrom:
            - configMapRef:
                name: {{ $releaseName }}-{{ $chartName }}-configmap
          ports:
            - name: http
              containerPort: {{ .Values.env.targetPort }}
              protocol: {{ .Values.env.protocol }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
            httpGet:
              path: {{ .Values.livenessProbe.path }}
              port: {{ .Values.env.targetPort }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.env.targetPort }}
          {{- end }}        
          {{- if .Values.resources.enabled }}
          resources:
            {{- toYaml .Values.resources.value | nindent 12 }}
          {{- end }}
        {{- if .Values.sidecars }}
        {{ tpl (toYaml .Values.sidecars) . | nindent 8 }}
        {{- end }}
      volumes:
        - name: nginx-config
          configMap:
            name: 'nginx-extra-configmap'      
        {{- if .Values.caSecretName }}
        - name: root-ca
          secret:
            secretName: {{ .Values.caSecretName }}
        {{- end }}
        {{- if eq (upper $storage.tilesStorageProvider) "FS" }}
        - name: output-storage
          persistentVolumeClaim:
            claimName: {{ $fs.internalPvc.name }}
        {{- end }}
        {{- if .Values.extraVolumes -}}
          {{ tpl (toYaml .Values.extraVolumes) . | nindent 8 }}
        {{- end }}
{{- end -}}
